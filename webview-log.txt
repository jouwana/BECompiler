
Congratulations, your extension "BEC" is now active!
data read at start: OCaml version 4.14.0
Enter #help;; for help.


code snippet: let parse_version (s: string): string = 
  (* Dummy implementation that just returns the input string *)
  s
output: # 
code snippet: 

let show_major (s: string): string =
  (* Dummy implementation that returns a string indicating major version *)
  "Major version: " ^ s
output:     
code snippet: 

let appInfo = ("My Application", "1.5")
output: val parse_version : string -> string = <fun>

code snippet: 

let process (name, vers) = name ^ show_major (parse_version vers)
output: #       
code snippet: 

let () = print_int (String.length (process appInfo))
output: val show_major : string -> string = <fun>
  #     val appInfo : string * string = ("My Application", "1.5")
# 
code snippet: 

output:   
output: val process : string * string -> string = <fun>
  # 
output:     
output: #   
output: # 32

toggle panel clicked in webview
Congratulations, your extension "BEC" is now active!
data read at start: OCaml version 4.14.0
Enter #help;; for help.


code snippet: let parse_version (s: string): string = 
  (* Dummy implementation that just returns the input string *)
  s
output: # 
code snippet: 

let show_major (s: string): string =
  (* Dummy implementation that returns a string indicating major version *)
  "Major version: " ^ s
output:   
code snippet: 

let appInfo = ("My Application", "1.5")
output: val parse_version : string -> string = <fun>

code snippet: 

let process (name, vers) = name ^ show_major (parse_version vers)
output:   #         
code snippet: 

let () = print_int (String.length (process appInfo))
output: val show_major : string -> string = <fun>
#     
code snippet: 

output: val appInfo : string * string = ("My Application", "1.5")
# 
output:     
output: val process : string * string -> string = <fun>

output: #   
output:   #   # 
output: 32

toggle panel clicked in webview
Congratulations, your extension "BEC" is now active!
data read at start: OCaml version 4.14.0
Enter #help;; for help.


code snippet: let parse_version (s: string): string = 
  (* Dummy implementation that just returns the input string *)
  s
output: # 
code snippet: 

let show_major (s: string): string =
  (* Dummy implementation that returns a string indicating major version *)
  "Major version: " ^ s
output:     
code snippet: 

let appInfo = ("My Application", "1.5")
output: val parse_version : string -> string = <fun>

code snippet: 

let process (name, vers) = name ^ show_major (parse_version vers)
output: #       
code snippet: 

let () = print_int (String.length (process appInfo))
output: val show_major : string -> string = <fun>
  #     
code snippet: 

output: val appInfo : string * string = ("My Application", "1.5")

output: #   
output: val process : string * string -> string = <fun>
  # 
output:     
output: # 
output:   # 32

toggle panel clicked in webview
Congratulations, your extension "BEC" is now active!
data read at start: OCaml version 4.14.0
Enter #help;; for help.


code snippet: let parse_version (s: string): string = 
  (* Dummy implementation that just returns the input string *)
  s
output: # 
code snippet: 

let show_major (s: string): string =
  (* Dummy implementation that returns a string indicating major version *)
  "Major version: " ^ s
output:     
code snippet: 

let appInfo = ("My Application", "1.5")
output: val parse_version : string -> string = <fun>

code snippet: 

let process (name, vers) = name ^ show_major (parse_version vers)
output: #       
code snippet: 

let () = print_int (String.length (process appInfo))
output: val show_major : string -> string = <fun>
  #     
code snippet: 

output: val appInfo : string * string = ("My Application", "1.5")

output: #   
output: val process : string * string -> string = <fun>
  # 
output:     
output: #   
output: # 32

toggle panel clicked in webview
Congratulations, your extension "BEC" is now active!
data read at start: OCaml version 4.14.0
Enter #help;; for help.

# 
code snippet: let parse_version (s: string): string = 
  (* Dummy implementation that just returns the input string *)
  s
output:   val parse_version : string -> string = <fun>
  # 
code snippet: 

let show_major (s: string): string =
  (* Dummy implementation that returns a string indicating major version *)
  "Major version: " ^ s
output:       val show_major : string -> string = <fun>
  # 
code snippet: 

let appInfo = ("My Application", "1.5")
output:   val appInfo : string * string = ("My Application", "1.5")
  # 
code snippet: 

let process (name, vers) = name ^ show_major (parse_version vers)
output:   val process : string * string -> string = <fun>
  # 
code snippet: 

let () = print_int (String.length (process appInfo))
output:     # 
code snippet: 

output:   # 
output: 32

toggle panel clicked in webview
Congratulations, your extension "BEC" is now active!
data read at start: OCaml version 4.14.0
Enter #help;; for help.


code snippet: let parse_version (s: string): string = 
  (* Dummy implementation that just returns the input string *)
  s
output: # 
code snippet: 

let show_major (s: string): string =
  (* Dummy implementation that returns a string indicating major version *)
  "Major version: " ^ s
output:     
code snippet: 

let appInfo = ("My Application", "1.5")
output: val parse_version : string -> string = <fun>

code snippet: 

let process (name, vers) = name ^ show_major (parse_version vers)
output: #         
code snippet: 

let () = print_int (String.length (process appInfo))
output: val show_major : string -> string = <fun>
#   
code snippet: 

output: val appInfo : string * string = ("My Application", "1.5")
  #     
output: val process : string * string -> string = <fun>

output: #   
output:   # 
output:   # 
output: 32

toggle panel clicked in webview
Congratulations, your extension "BEC" is now active!
data read at start: OCaml version 4.14.0
Enter #help;; for help.

# 
code snippet: let parse_version (s: string): string = 
  (* Dummy implementation that just returns the input string *)
  s
output:   val parse_version : string -> string = <fun>
  # 
code snippet: 

let show_major (s: string): string =
  (* Dummy implementation that returns a string indicating major version *)
  "Major version: " ^ s
output:         val show_major : string -> string = <fun>
# 
code snippet: 

let appInfo = ("My Application", "1.5")
output:   val appInfo : string * string = ("My Application", "1.5")
  # 
code snippet: 

let process (name, vers) = name ^ show_major (parse_version vers)
output:     val process : string * string -> string = <fun>
# 
code snippet: 

let () = print_int (String.length (process appInfo))
output:     # 
code snippet: 

output:   # 
output: 32

toggle panel clicked in webview
Congratulations, your extension "BEC" is now active!
data read at start: OCaml version 4.14.0
Enter #help;; for help.


code snippet: let parse_version (s: string): string = 
  (* Dummy implementation that just returns the input string *)
  s
output: #     val parse_version : string -> string = <fun>

code snippet: 

let show_major (s: string): string =
  (* Dummy implementation that returns a string indicating major version *)
  "Major version: " ^ s
output: #       val show_major : string -> string = <fun>
  # 
code snippet: 

let appInfo = ("My Application", "1.5")
output:   val appInfo : string * string = ("My Application", "1.5")
  # 
code snippet: 

let process (name, vers) = name ^ show_major (parse_version vers)
output:   val process : string * string -> string = <fun>
  # 
code snippet: 

let () = print_int (String.length (process appInfo))
output:     
code snippet: 

output: #   # 
output: 32

toggle panel clicked in webview
Congratulations, your extension "BEC" is now active!
data read at start: OCaml version 4.14.0
Enter #help;; for help.


code snippet: let parse_version (s: string): string = 
  (* Dummy implementation that just returns the input string *)
  s
code snippet: 

let process (name, vers) = name ^ show_major (parse_version vers)
output: val parse_version : string -> string = <fun>

code snippet: 

output: val show_major : string -> string = <fun>

code snippet: undefined
output:   #     val appInfo : string * string = ("My Application", "1.5")

code snippet: undefined
output: val process : string * string -> string = <fun>

code snippet: undefined
output: # 32

toggle panel clicked in webview
Congratulations, your extension "BEC" is now active!
data read at start: OCaml version 4.14.0
Enter #help;; for help.


code snippet: 

let process (name, vers) = name ^ show_major (parse_version vers)
output: val parse_version : string -> string = <fun>
  #         
code snippet: 

let () = print_int (String.length (process appInfo))
output: val show_major : string -> string = <fun>
#   
code snippet: 

output: val appInfo : string * string = ("My Application", "1.5")
  #     
code snippet: undefined
output: val process : string * string -> string = <fun>
#     
code snippet: undefined
output: #   # 
code snippet: undefined
output: 32

toggle panel clicked in webview
Congratulations, your extension "BEC" is now active!
data read at start: OCaml version 4.14.0
Enter #help;; for help.

# 
code snippet: 

let show_major (s: string): string =
  (* Dummy implementation that returns a string indicating major version *)
  "Major version: " ^ s
output:     val parse_version : string -> string = <fun>
# 
code snippet: 

let appInfo = ("My Application", "1.5")
output:       val show_major : string -> string = <fun>
  # 
code snippet: 

let process (name, vers) = name ^ show_major (parse_version vers)
output:   val appInfo : string * string = ("My Application", "1.5")
  # 
code snippet: 

let () = print_int (String.length (process appInfo))
output:     val process : string * string -> string = <fun>
# 
code snippet: undefined
output: 32

toggle panel clicked in webview
data read at start: OCaml version 4.14.0
Enter #help;; for help.


code snippet: 

let appInfo = ("My Application", 1.5)
output: val parse_version : string -> string = <fun>

code snippet: 

let process (name, vers) = name ^ show_major (parse_version vers)
output: #   Line 3, characters 2-3:
Error: Unbound value s
  #         
code snippet: 

let test = process appInfo
output: val show_major : string -> string = <fun>

code snippet: undefined
output: val appInfo : string * float = ("My Application", 1.5)
  # 
code snippet: undefined
output: val process : string * string -> string = <fun>

code snippet: undefined
output: Line 3, characters 19-26:
Error: This expression has type string * float
       but an expression was expected of type string * string
       Type float is not compatible with type string 

code snippet: undefined
output:   #   # 

toggle panel clicked in webview
data read at start: OCaml version 4.14.0
Enter #help;; for help.


code snippet: 

let process (name, vers) = name ^ show_major (parse_version vers)
output: val parse_version : string -> string = <fun>

code snippet: 

output: val show_major : string -> string = <fun>
# 
code snippet: undefined
output:     val appInfo : string * float = ("My Application", 1.5)
#   
code snippet: undefined
output: val process : string * string -> string = <fun>
  # 
code snippet: undefined
output:     Line 3, characters 19-26:
Error: This expression has type string * float
       but an expression was expected of type string * string
       Type float is not compatible with type string 
#   
toggle panel clicked in webview
